--- a/src/InputstreamDemux.cpp	2021-01-16 15:52:49.000000000 +0100
+++ b/src/InputstreamDemux.cpp	2021-07-01 22:08:50.321488866 +0200
@@ -372,7 +372,7 @@
       props.SetBlockAlign(resp->extract_U32());
       props.SetBitRate(resp->extract_U32());
       props.SetBitsPerSample(resp->extract_U32());
-      props.SetLanguage(language);
+      //props.SetLanguage(language);
     }
     else if (codecId.GetCodecType() == PVR_CODEC_TYPE_VIDEO)
     {
@@ -387,14 +387,14 @@
       const char* language = resp->extract_String();
       uint32_t composition_id(resp->extract_U32());
       uint32_t ancillary_id(resp->extract_U32());
-      props.SetLanguage(language);
-      props.SetSubtitleInfo((composition_id & 0xffff) | ((ancillary_id & 0xffff) << 16));
+      //props.SetLanguage(language);
+      //props.SetSubtitleInfo((composition_id & 0xffff) | ((ancillary_id & 0xffff) << 16));
     }
     else if (codecId.GetCodecType() == PVR_CODEC_TYPE_RDS)
     {
       const char* language = resp->extract_String();
       uint32_t rel_channel_pid(resp->extract_U32());
-      props.SetLanguage(language);
+      //props.SetLanguage(language);
     }
     else
     {
@@ -451,7 +451,7 @@
         props->SetBlockAlign(resp->extract_U32());
         props->SetBitRate(resp->extract_U32());
         props->SetBitsPerSample(resp->extract_U32());
-        props->SetLanguage(language);
+        //props->SetLanguage(language);
       }
       else if (props->GetCodecType() == PVR_CODEC_TYPE_VIDEO)
       {
@@ -467,8 +467,8 @@
         uint32_t composition_id(resp->extract_U32());
         uint32_t ancillary_id(resp->extract_U32());
 
-        props->SetSubtitleInfo((composition_id & 0xffff) | ((ancillary_id & 0xffff) << 16));
-        props->SetLanguage(language);
+        //props->SetSubtitleInfo((composition_id & 0xffff) | ((ancillary_id & 0xffff) << 16));
+        //props->SetLanguage(language);
       }
     }
     else
